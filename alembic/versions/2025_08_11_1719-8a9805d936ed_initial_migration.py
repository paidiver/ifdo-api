"""Initial migration

Revision ID: 8a9805d936ed
Revises: 
Create Date: 2025-08-11 17:19:14.313066

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from geoalchemy2 import Geometry
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8a9805d936ed'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('annotators',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_camera_calibration_models',
    sa.Column('calibration_model_type', sa.String(length=100), nullable=True),
    sa.Column('focal_length_xy_pixel', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('principal_point_xy_pixel', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('distortion_coefficients', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('approximate_field_of_view_water_xy_degree', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('extra_description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('image_camera_housing_viewports',
    sa.Column('viewport_type', sa.String(length=100), nullable=True),
    sa.Column('optical_density', sa.Float(), nullable=True),
    sa.Column('thickness_millimeters', sa.Float(), nullable=True),
    sa.Column('extra_description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('image_camera_poses',
    sa.Column('utm_zone', sa.String(length=10), nullable=True),
    sa.Column('utm_epsg', sa.String(length=10), nullable=True),
    sa.Column('utm_east_north_up_meters', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('absolute_orientation_utm_matrix', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('image_contexts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('uri', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_creators',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('uri', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_domeport_parameters',
    sa.Column('outer_radius_millimeters', sa.Float(), nullable=True),
    sa.Column('decentering_offset_xyz_millimeters', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('extra_description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('image_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('uri', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_flatport_parameters',
    sa.Column('lens_port_distance_millimeters', sa.Float(), nullable=True),
    sa.Column('interface_normal_direction', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('extra_description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('image_licenses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('uri', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_photometric_calibrations',
    sa.Column('sequence_white_balancing', sa.Text(), nullable=True),
    sa.Column('exposure_factor_rgb', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('sequence_illumination_type', sa.String(length=100), nullable=True),
    sa.Column('sequence_illumination_description', sa.Text(), nullable=True),
    sa.Column('illumination_factor_rgb', postgresql.ARRAY(sa.Float(), dimensions=1), nullable=True),
    sa.Column('water_properties_description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('image_pis',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('uri', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_platforms',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('uri', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('uri', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_sensors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('uri', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('image_set_related_materials',
    sa.Column('uri', sa.String(), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('relation', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('labels',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('info', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('provenance_activities',
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('provenance_agents',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('unique_id', sa.String(length=500), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('unique_id')
    )
    op.create_table('provenance_entities',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('unique_id', sa.String(length=500), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('unique_id')
    )
    op.create_table('annotation_labels',
    sa.Column('label_id', sa.UUID(), nullable=False),
    sa.Column('annotator_id', sa.UUID(), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['annotator_id'], ['annotators.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['label_id'], ['labels.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_geospatial_table('datasets',
    sa.Column('handle', sa.String(), nullable=True),
    sa.Column('context_id', sa.UUID(), nullable=True),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('event_id', sa.UUID(), nullable=True),
    sa.Column('platform_id', sa.UUID(), nullable=True),
    sa.Column('sensor_id', sa.UUID(), nullable=True),
    sa.Column('pi_id', sa.UUID(), nullable=True),
    sa.Column('license_id', sa.UUID(), nullable=True),
    sa.Column('camera_pose_id', sa.UUID(), nullable=True),
    sa.Column('camera_housing_viewport_id', sa.UUID(), nullable=True),
    sa.Column('flatport_parameter_id', sa.UUID(), nullable=True),
    sa.Column('domeport_parameter_id', sa.UUID(), nullable=True),
    sa.Column('photometric_calibration_id', sa.UUID(), nullable=True),
    sa.Column('camera_calibration_model_id', sa.UUID(), nullable=True),
    sa.Column('local_path', sa.String(length=500), nullable=True),
    sa.Column('min_latitude_degrees', sa.Float(), nullable=True),
    sa.Column('max_latitude_degrees', sa.Float(), nullable=True),
    sa.Column('min_longitude_degrees', sa.Float(), nullable=True),
    sa.Column('max_longitude_degrees', sa.Float(), nullable=True),
    sa.Column('limits', Geometry(geometry_type='POLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('sha256_hash', sa.String(length=64), nullable=True),
    sa.Column('date_time', sa.DateTime(), nullable=True),
    sa.Column('geom', Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('altitude_meters', sa.Float(), nullable=True),
    sa.Column('coordinate_uncertainty_m', sa.Float(), nullable=True),
    sa.Column('copyright', sa.String(length=500), nullable=True),
    sa.Column('abstract', sa.Text(), nullable=True),
    sa.Column('entropy', sa.Float(), nullable=True),
    sa.Column('particle_count', sa.Integer(), nullable=True),
    sa.Column('average_color', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_color_layout', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_color_statistic', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_color_structure', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_dominant_color', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_edge_histogram', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_homogeneous_texture', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_scalable_color', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('acquisition', sa.Enum('photo', 'video', 'slide', name='acquisitionenum'), nullable=True),
    sa.Column('quality', sa.Enum('raw', 'processed', 'product', name='qualityenum'), nullable=True),
    sa.Column('deployment', sa.Enum('mapping', 'stationary', 'survey', 'exploration', 'experiment', 'sampling', name='deploymentenum'), nullable=True),
    sa.Column('navigation', sa.Enum('satellite', 'beacon', 'transponder', 'reconstructed', name='navigationenum'), nullable=True),
    sa.Column('scale_reference', sa.Enum('camera_3d', 'camera_calibrated', 'laser_marker', 'optical_flow', name='scalereferenceenum'), nullable=True),
    sa.Column('illumination', sa.Enum('sunlight', 'artificial_light', 'mixed_light', name='illuminationenum'), nullable=True),
    sa.Column('pixel_magnitude', sa.Enum('km', 'hm', 'dam', 'm', 'cm', 'mm', 'um', name='pixelmagnitudeenum'), nullable=True),
    sa.Column('marine_zone', sa.Enum('seafloor', 'water_column', 'sea_surface', 'atmosphere', 'laboratory', name='marinezoneenum'), nullable=True),
    sa.Column('spectral_resolution', sa.Enum('grayscale', 'rgb', 'multi_spectral', 'hyper_spectral', name='spectralresenum'), nullable=True),
    sa.Column('capture_mode', sa.Enum('timer', 'manual', 'mixed', name='capturemodeenum'), nullable=True),
    sa.Column('fauna_attraction', sa.Enum('none', 'baited', 'light', name='faunaattractionenum'), nullable=True),
    sa.Column('area_square_meters', sa.Float(), nullable=True),
    sa.Column('meters_above_ground', sa.Float(), nullable=True),
    sa.Column('acquisition_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('camera_yaw_degrees', sa.Float(), nullable=True),
    sa.Column('camera_pitch_degrees', sa.Float(), nullable=True),
    sa.Column('camera_roll_degrees', sa.Float(), nullable=True),
    sa.Column('overlap_fraction', sa.Float(), nullable=True),
    sa.Column('objective', sa.Text(), nullable=True),
    sa.Column('target_environment', sa.Text(), nullable=True),
    sa.Column('target_timescale', sa.Text(), nullable=True),
    sa.Column('spatial_constraints', sa.Text(), nullable=True),
    sa.Column('temporal_constraints', sa.Text(), nullable=True),
    sa.Column('time_synchronisation', sa.Text(), nullable=True),
    sa.Column('item_identification_scheme', sa.Text(), nullable=True),
    sa.Column('curation_protocol', sa.Text(), nullable=True),
    sa.Column('visual_constraints', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['camera_calibration_model_id'], ['image_camera_calibration_models.id'], ),
    sa.ForeignKeyConstraint(['camera_housing_viewport_id'], ['image_camera_housing_viewports.id'], ),
    sa.ForeignKeyConstraint(['camera_pose_id'], ['image_camera_poses.id'], ),
    sa.ForeignKeyConstraint(['context_id'], ['image_contexts.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['domeport_parameter_id'], ['image_domeport_parameters.id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['image_events.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['flatport_parameter_id'], ['image_flatport_parameters.id'], ),
    sa.ForeignKeyConstraint(['license_id'], ['image_licenses.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['photometric_calibration_id'], ['image_photometric_calibrations.id'], ),
    sa.ForeignKeyConstraint(['pi_id'], ['image_pis.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['platform_id'], ['image_platforms.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['image_projects.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sensor_id'], ['image_sensors.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('sha256_hash')
    )
    op.create_geospatial_index('idx_datasets_geom', 'datasets', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_geospatial_index('idx_datasets_limits', 'datasets', ['limits'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_table('provenanceactivity_agent',
    sa.Column('activity_id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['provenance_activities.id'], ),
    sa.ForeignKeyConstraint(['agent_id'], ['provenance_agents.id'], ),
    sa.PrimaryKeyConstraint('activity_id', 'agent_id')
    )
    op.create_table('provenanceactivity_entity',
    sa.Column('activity_id', sa.UUID(), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['provenance_activities.id'], ),
    sa.ForeignKeyConstraint(['entity_id'], ['provenance_entities.id'], ),
    sa.PrimaryKeyConstraint('activity_id', 'entity_id')
    )
    op.create_table('provenanceentity_activity',
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('activity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['provenance_activities.id'], ),
    sa.ForeignKeyConstraint(['entity_id'], ['provenance_entities.id'], ),
    sa.PrimaryKeyConstraint('entity_id', 'activity_id')
    )
    op.create_table('provenanceentity_agent',
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['provenance_agents.id'], ),
    sa.ForeignKeyConstraint(['entity_id'], ['provenance_entities.id'], ),
    sa.PrimaryKeyConstraint('entity_id', 'agent_id')
    )
    op.create_table('dataset_provenance_activities',
    sa.Column('dataset_id', sa.UUID(), nullable=False),
    sa.Column('activity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['provenance_activities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dataset_id', 'activity_id')
    )
    op.create_table('dataset_provenance_agents',
    sa.Column('dataset_id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['provenance_agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dataset_id', 'agent_id')
    )
    op.create_table('dataset_provenance_entities',
    sa.Column('dataset_id', sa.UUID(), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['entity_id'], ['provenance_entities.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dataset_id', 'entity_id')
    )
    op.create_table('dataset_related_materials',
    sa.Column('dataset_id', sa.UUID(), nullable=False),
    sa.Column('material_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['material_id'], ['image_set_related_materials.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dataset_id', 'material_id')
    )
    op.create_table('datasets_creators',
    sa.Column('dataset_id', sa.UUID(), nullable=False),
    sa.Column('creator_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['image_creators.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dataset_id', 'creator_id')
    )
    op.create_geospatial_table('images',
    sa.Column('context_id', sa.UUID(), nullable=True),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('event_id', sa.UUID(), nullable=True),
    sa.Column('platform_id', sa.UUID(), nullable=True),
    sa.Column('sensor_id', sa.UUID(), nullable=True),
    sa.Column('pi_id', sa.UUID(), nullable=True),
    sa.Column('license_id', sa.UUID(), nullable=True),
    sa.Column('camera_pose_id', sa.UUID(), nullable=True),
    sa.Column('camera_housing_viewport_id', sa.UUID(), nullable=True),
    sa.Column('flatport_parameter_id', sa.UUID(), nullable=True),
    sa.Column('domeport_parameter_id', sa.UUID(), nullable=True),
    sa.Column('photometric_calibration_id', sa.UUID(), nullable=True),
    sa.Column('camera_calibration_model_id', sa.UUID(), nullable=True),
    sa.Column('dataset_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('sha256_hash', sa.String(length=64), nullable=True),
    sa.Column('date_time', sa.DateTime(), nullable=True),
    sa.Column('geom', Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('altitude_meters', sa.Float(), nullable=True),
    sa.Column('coordinate_uncertainty_m', sa.Float(), nullable=True),
    sa.Column('copyright', sa.String(length=500), nullable=True),
    sa.Column('abstract', sa.Text(), nullable=True),
    sa.Column('entropy', sa.Float(), nullable=True),
    sa.Column('particle_count', sa.Integer(), nullable=True),
    sa.Column('average_color', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_color_layout', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_color_statistic', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_color_structure', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_dominant_color', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_edge_histogram', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_homogeneous_texture', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('mpeg7_scalable_color', postgresql.ARRAY(sa.Float()), nullable=True),
    sa.Column('acquisition', sa.Enum('photo', 'video', 'slide', name='acquisitionenum'), nullable=True),
    sa.Column('quality', sa.Enum('raw', 'processed', 'product', name='qualityenum'), nullable=True),
    sa.Column('deployment', sa.Enum('mapping', 'stationary', 'survey', 'exploration', 'experiment', 'sampling', name='deploymentenum'), nullable=True),
    sa.Column('navigation', sa.Enum('satellite', 'beacon', 'transponder', 'reconstructed', name='navigationenum'), nullable=True),
    sa.Column('scale_reference', sa.Enum('camera_3d', 'camera_calibrated', 'laser_marker', 'optical_flow', name='scalereferenceenum'), nullable=True),
    sa.Column('illumination', sa.Enum('sunlight', 'artificial_light', 'mixed_light', name='illuminationenum'), nullable=True),
    sa.Column('pixel_magnitude', sa.Enum('km', 'hm', 'dam', 'm', 'cm', 'mm', 'um', name='pixelmagnitudeenum'), nullable=True),
    sa.Column('marine_zone', sa.Enum('seafloor', 'water_column', 'sea_surface', 'atmosphere', 'laboratory', name='marinezoneenum'), nullable=True),
    sa.Column('spectral_resolution', sa.Enum('grayscale', 'rgb', 'multi_spectral', 'hyper_spectral', name='spectralresenum'), nullable=True),
    sa.Column('capture_mode', sa.Enum('timer', 'manual', 'mixed', name='capturemodeenum'), nullable=True),
    sa.Column('fauna_attraction', sa.Enum('none', 'baited', 'light', name='faunaattractionenum'), nullable=True),
    sa.Column('area_square_meters', sa.Float(), nullable=True),
    sa.Column('meters_above_ground', sa.Float(), nullable=True),
    sa.Column('acquisition_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('camera_yaw_degrees', sa.Float(), nullable=True),
    sa.Column('camera_pitch_degrees', sa.Float(), nullable=True),
    sa.Column('camera_roll_degrees', sa.Float(), nullable=True),
    sa.Column('overlap_fraction', sa.Float(), nullable=True),
    sa.Column('objective', sa.Text(), nullable=True),
    sa.Column('target_environment', sa.Text(), nullable=True),
    sa.Column('target_timescale', sa.Text(), nullable=True),
    sa.Column('spatial_constraints', sa.Text(), nullable=True),
    sa.Column('temporal_constraints', sa.Text(), nullable=True),
    sa.Column('time_synchronisation', sa.Text(), nullable=True),
    sa.Column('item_identification_scheme', sa.Text(), nullable=True),
    sa.Column('curation_protocol', sa.Text(), nullable=True),
    sa.Column('visual_constraints', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['camera_calibration_model_id'], ['image_camera_calibration_models.id'], ),
    sa.ForeignKeyConstraint(['camera_housing_viewport_id'], ['image_camera_housing_viewports.id'], ),
    sa.ForeignKeyConstraint(['camera_pose_id'], ['image_camera_poses.id'], ),
    sa.ForeignKeyConstraint(['context_id'], ['image_contexts.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['domeport_parameter_id'], ['image_domeport_parameters.id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['image_events.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['flatport_parameter_id'], ['image_flatport_parameters.id'], ),
    sa.ForeignKeyConstraint(['license_id'], ['image_licenses.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['photometric_calibration_id'], ['image_photometric_calibrations.id'], ),
    sa.ForeignKeyConstraint(['pi_id'], ['image_pis.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['platform_id'], ['image_platforms.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['image_projects.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sensor_id'], ['image_sensors.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('sha256_hash')
    )
    op.create_geospatial_index('idx_images_geom', 'images', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_table('annotations',
    sa.Column('shape', sa.Enum('single_pixel', 'polyline', 'polygon', 'circle', 'rectangle', 'ellipse', 'whole_image', name='shapeenum'), nullable=False),
    sa.Column('coordinates', postgresql.ARRAY(sa.Float(), dimensions=2), nullable=False),
    sa.Column('image_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('images_creators',
    sa.Column('image_id', sa.UUID(), nullable=False),
    sa.Column('creator_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['image_creators.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('image_id', 'creator_id')
    )
    op.create_table('image_annotation_labels',
    sa.Column('annotation_id', sa.UUID(), nullable=False),
    sa.Column('annotation_label_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['annotation_id'], ['annotations.id'], ),
    sa.ForeignKeyConstraint(['annotation_label_id'], ['annotation_labels.id'], ),
    sa.PrimaryKeyConstraint('annotation_id', 'annotation_label_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('image_annotation_labels')
    op.drop_table('images_creators')
    op.drop_table('annotations')
    op.drop_geospatial_index('idx_images_geom', table_name='images', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('images')
    op.drop_table('datasets_creators')
    op.drop_table('dataset_related_materials')
    op.drop_table('dataset_provenance_entities')
    op.drop_table('dataset_provenance_agents')
    op.drop_table('dataset_provenance_activities')
    op.drop_table('provenanceentity_agent')
    op.drop_table('provenanceentity_activity')
    op.drop_table('provenanceactivity_entity')
    op.drop_table('provenanceactivity_agent')
    op.drop_geospatial_index('idx_datasets_limits', table_name='datasets', postgresql_using='gist', column_name='limits')
    op.drop_geospatial_index('idx_datasets_geom', table_name='datasets', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('datasets')
    op.drop_table('annotation_labels')
    op.drop_table('provenance_entities')
    op.drop_table('provenance_agents')
    op.drop_table('provenance_activities')
    op.drop_table('labels')
    op.drop_table('image_set_related_materials')
    op.drop_table('image_sensors')
    op.drop_table('image_projects')
    op.drop_table('image_platforms')
    op.drop_table('image_pis')
    op.drop_table('image_photometric_calibrations')
    op.drop_table('image_licenses')
    op.drop_table('image_flatport_parameters')
    op.drop_table('image_events')
    op.drop_table('image_domeport_parameters')
    op.drop_table('image_creators')
    op.drop_table('image_contexts')
    op.drop_table('image_camera_poses')
    op.drop_table('image_camera_housing_viewports')
    op.drop_table('image_camera_calibration_models')
    op.drop_table('annotators')
    # ### end Alembic commands ###
