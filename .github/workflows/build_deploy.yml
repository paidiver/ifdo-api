name: Build and Deploy Paidiver

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  CI_REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build-api:
    name: Build API Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t $CI_REGISTRY_IMAGE:latest -f dockerfiles/Dockerfile .
          docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:${{ github.sha }}
          docker push $CI_REGISTRY_IMAGE:latest
          docker push $CI_REGISTRY_IMAGE:${{ github.sha }}

  build-alembic:
    name: Build Alembic Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Alembic Image
        run: |
          docker build -t $CI_REGISTRY_IMAGE:alembic-latest -f dockerfiles/Dockerfile.alembic .
          docker tag $CI_REGISTRY_IMAGE:alembic-latest $CI_REGISTRY_IMAGE:alembic-${CI_COMMIT_SHA}
          docker push $CI_REGISTRY_IMAGE:alembic-latest
          docker push $CI_REGISTRY_IMAGE:alembic-${CI_COMMIT_SHA}

  deploy-helm:
    name: Deploy Helm Charts
    runs-on: ubuntu-latest
    needs: [build-api, build-alembic]
    container:
      image: alpine/helm:3.12.0
      options: --entrypoint ""
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          echo "HELM_KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
      - name: Deploy Helm Chart
        run: |
          RELEASE_NAME="ifdo-api"
          CHART_PATH="./deployment/api"

          if helm ls -n "${{ secrets.KUBE_NAMESPACE }}" | grep -q "$RELEASE_NAME"; then
            echo "Upgrading release $RELEASE_NAME"
            helm upgrade "$RELEASE_NAME" "$CHART_PATH" \
              --namespace "${{ secrets.KUBE_NAMESPACE }}" \
              --set image.repository="$CI_REGISTRY_IMAGE" \
              --set image.tag="$CI_COMMIT_SHA"
          else
            echo "Installing new release $RELEASE_NAME"
            helm install "$RELEASE_NAME" "$CHART_PATH" \
              --namespace "${{ secrets.KUBE_NAMESPACE }}" \
              --set image.repository="$CI_REGISTRY_IMAGE" \
              --set image.tag="$CI_COMMIT_SHA"
          fi

  deploy-helm-migration:
    name: Deploy Helm DB Migration
    runs-on: ubuntu-latest
    container:
      image: alpine/helm:3.12.0
      options: --entrypoint ""
    needs: deploy-helm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          echo "HELM_KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
      - name: Deploy DB Chart
        run: |
          RELEASE_NAME="db"
          CHART_PATH="./deployment/$RELEASE_NAME"

          helm upgrade "$RELEASE_NAME" "$CHART_PATH" \
            --namespace "${{ secrets.KUBE_NAMESPACE }}" \
            --set migration.repository="$CI_REGISTRY_IMAGE" \
            --set migration.tag="alembic-${CI_COMMIT_SHA}"

  cleanup:
    name: Cleanup GHCR Tags
    runs-on: ubuntu-latest
    needs: [deploy-helm-migration]
    steps:
      - name: Setup
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: List and Delete Old GHCR Tags
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          echo "Fetching image versions from GHCR..."

          # Get package versions
          versions=$(curl -s -H "Authorization: Bearer $GHCR_PAT" \
            "https://ghcr.io/v2/${OWNER}/${REPO}/tags/list" \
            | jq -r '.tags[]' | grep -v latest | sort)

          echo "All non-latest tags:"
          echo "$versions"

          # Keep the N newest
          tags_to_delete=$(echo "$versions" | head -n -4)

          for tag in $tags_to_delete; do
            echo "Deleting tag: $tag"
            curl -s -X DELETE \
              -H "Authorization: Bearer $GHCR_PAT" \
              "https://ghcr.io/v2/${OWNER}/${REPO}/manifests/$( \
                curl -s -H "Authorization: Bearer $GHCR_PAT" \
                "https://ghcr.io/v2/${OWNER}/${REPO}/manifests/$tag" \
                -H "Accept: application/vnd.oci.image.manifest.v1+json" \
                | jq -r '.config.digest')"
          done
