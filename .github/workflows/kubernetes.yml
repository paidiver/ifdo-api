name: Deploy Kubernetes Resources

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  SECRETS_NAME: paidiver-secret

jobs:
  create_namespace:
    name: Create Namespace
    runs-on: ubuntu-latest
    container:
      image: bitnami/kubectl:latest
    steps:
      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          echo "HELM_KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
      - name: Create namespace if not exists
        run: |
          kubectl get namespace "${{ secrets.KUBE_NAMESPACE }}" || kubectl create namespace "${{ secrets.KUBE_NAMESPACE }}"

  create_secrets:
    name: Create Secrets
    runs-on: ubuntu-latest
    container:
      image: bitnami/kubectl:latest
    needs: create_namespace
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      POSTGRES_PORT_ALEMBIC: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_HOST_ALEMBIC: ${{ secrets.POSTGRES_HOST }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          echo "HELM_KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
      - name: Create Kubernetes secrets
        run: |
          ENV_SUFFIX=""
          kubectl create secret generic "$SECRETS_NAME" \
            --from-literal=POSTGRES_USER="$POSTGRES_USER" \
            --from-literal=POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
            --from-literal=POSTGRES_DB="$POSTGRES_DB" \
            --from-literal=POSTGRES_PORT="$POSTGRES_PORT" \
            --from-literal=POSTGRES_HOST="$POSTGRES_HOST" \
            --from-literal=REDIS_HOST="$REDIS_HOST" \
            --from-literal=REDIS_PORT="$REDIS_PORT" \
            --from-literal=POSTGRES_PORT_ALEMBIC="$POSTGRES_PORT_ALEMBIC" \
            --from-literal=POSTGRES_HOST_ALEMBIC="$POSTGRES_HOST_ALEMBIC" \
            --namespace=${{ secrets.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml \
            | kubectl apply -n ${{ secrets.KUBE_NAMESPACE }} -f -


  ssl_certificates:
    name: Apply SSL Certificates
    runs-on: ubuntu-latest
    container:
      image: bitnami/kubectl:latest
    needs: create_secrets
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          echo "HELM_KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
      - name: Apply Cluster Issuer
        run: |
          kubectl apply -f ./deployment/cluster-issuer.yaml


  deploy-redis:
    name: Deploy Redis Helm Charts
    runs-on: ubuntu-latest
    needs: [ssl_certificates]
    container:
      image: alpine/helm:3.12.0
      options: --entrypoint ""
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          echo "HELM_KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
      - name: Deploy Redis Helm Chart
        run: |
          RELEASE_NAME="redis-cache"
          CHART_PATH="./deployment/redis"

          if helm ls -n "${{ secrets.KUBE_NAMESPACE }}" | grep -q "$RELEASE_NAME"; then
            echo "Upgrading release $RELEASE_NAME"
            helm upgrade "$RELEASE_NAME" "$CHART_PATH" \
              --namespace "${{ secrets.KUBE_NAMESPACE }}"
          else
            echo "Installing new release $RELEASE_NAME"
            helm install "$RELEASE_NAME" "$CHART_PATH" \
              --namespace "${{ secrets.KUBE_NAMESPACE }}"
          fi
